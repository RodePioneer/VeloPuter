# Use cases for all settings in the VeloPuter

This document gives an overview of the settings we require, by listing
all the use cases and distilling a list of settings to be implemented.
If possible the settings should be sufficient to allow for a single
code-base for all users, with customizations for different velomobiles
done entirely in the settings. This explicitly _excludes_ the
configuration of the pins on the Arduino.

At the end we will classify each setting into user-level and
installer-level settings. This will dictate the order in which the
parameters can be accessed in the settings application.

## Set the circumference of the front wheel

This circumference is required to correctly calculate the speed from the
time intervals sensed by the speed sensor. Its value depends on the
choice of tires. The `wheelCircumference_mm` constant currently holds
this value.

## Set the circumference of the rear wheel

This circumference is required to correctly calculate the size of the
sprocket that is used. Its value depends on the choice of rear tire(s).
The `rearWheelCircumference_mm` constant currently holds this value.

## Front Chainring

The number of teeth on the (main) chainring is a user choice. It is
needed to correctly calculate the size of the sprocket that is used from
the cadence and the speed.

## Cassette

The number of teeth on each ring of the cassette. Depending on your
setup this may be a list of teeth-counts with a length that is equal to
the actual number of sprockets, or an extended list to include the
virtual sprockets generated by using the Schlumpf-drive. For a standard
(compact) double the virtual sprockets overlap for all but three or four
with the normal drive. To allow for the double list, the number of
elements reserved for this is 20. The `setTeethOnCassette` array
variable contains the list. To allow for the 2½ times reduction of the
Schlumpf, this list should be of type `float`.

## Battery chemistry

The user has several options for the battery: LiPo, LiFePO₄, NiMH,
perhaps more. All have different thresholds for the safety regimes.
Since the battery is a user choice, a switch should be possible. At the
moment the battery type is a _compile-time_ choice, no variable defined
yet.

## Model

Some features are model dependent, specifically the third rear light for
the QuattroVelo. At the moment some pin assignments on the Arduino also
depend on the model, but these seem to be legacy configurations.

Using a ‘model’ as a starting point for a configuration can minimise the
number of configuration changes later on, but may complicate the code.
On the other hand, this part will likely change as the (hardware) option
of a FET rather than a current controller becomes available. In that
case the configuration per channel will likely override this base
configuration. See section on “channel configuration”.

## Auto blink count

The number of times to (auto) blink is a user preference, likely related
to the nominal speed of the rider. The constant `numTimesToBlink`
contains the value for the blink-count.

## Default level for rear light on startup

The level (low, medium, fog) of the rear light on startup should be a
user preference. The current fixed setting is in the `setup()` function,
in the line `rearLed.setLedLow();`.

## Default level for headlights on startup

The level (off, low, medium, high) of the headlights on startup should
be a user preference. The current fixed setting is in the `setup()`
function, in the line `headLed.setLedLow();`.

## Intensity of headlights in the dimmed (middle) level

The intensity of the medium level of the headlights is the only level
I’ve found I want to adjust. The current value is 96, adjustment in the
range 90 to 120 seems desirable. The current value is in the
`headLedMediumIntensity` constant. 

## Brake-light blink on fog light toggle

Once implemented the brake-intensity blink should be user controllable. 

## Set odometer

Once implemented, the odometer should be controllable, to transfer the
current distance to the VeloPuter.

## Configure display

With all the extra functionality (trip distance, odometer, mean & max
speed, mean & max cadence, trip time) we can’t fit it all on the display
at once. Some setting is needed to configure what is shown, or some
other means to cycle through some standard display modes. While we’re at
it, I’d like to see my cadence in large digits, the speed is less
important.

## Set channel configuration

For each channel the hardware configuration must be set (current
controller, on/off switch, or disabled). This may be connected to a
‘model’, but I’m not sure what the best solution is here.

# Priorities

There will likely be a sequence of setting screens. In this sequence,
user settings should come first, starting with the settings most likely
to change (display), and moving to the setting least likely to change
(battery chemistry). After the user settings we get the VeloPuter
settings (channel configuration, model), which the user should not
touch.

